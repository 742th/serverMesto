const express = require('express');
require('dotenv').config();
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const { celebrate, Joi, errors } = require('celebrate');

const app = express();
const { PORT = 3000 } = process.env;
const path = require('path');

const { routerCard } = require(path.join(__dirname, './routes/cards.js'));
const { routerUsers } = require(path.join(__dirname, './routes/users.js'));
const auth = require(path.join(__dirname, './middlewares/auth'));
const { login, createUser } = require(path.join(__dirname, './controllers/users'));
const { requestLogger, errorLogger } = require('./middlewares/logger');

// подключаемся к серверу монгус
mongoose.connect('mongodb://localhost:27017/mestodb', {
  useNewUrlParser: true,
  useCreateIndex: true,
  useFindAndModify: false,
  useUnifiedTopology: true,
});

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

app.use(requestLogger);
app.get('/crash-test', () => {
  setTimeout(() => {
    throw new Error('Сервер сейчас упадёт');
  }, 0);
});
app.post('/signup', celebrate({
  body: Joi.object().keys({
    name: Joi.string().required().min(2).max(30),
    about: Joi.string().required().min(2).max(30),
    // eslint-disable-next-line no-useless-escape
    avatar: Joi.string().required(),
    email: Joi.string().required().email({ minDomainSegments: 2, tlds: { allow: ['com', 'net', 'ru'] } }),
    password: Joi.string().required().min(8),
  }),
}), createUser);
app.post('/signin', login);
// аутентификация пользователя
app.use(auth);
// роутер для отдачи карточек
app.use('/cards', routerCard);
// роутер для отдачи юзеров и юзера
app.use('/users', routerUsers);
// для запросов на не сущестующий адрес
app.use((req, res) => res.status(404).send({ message: 'Запрашиваемый ресурс не найден' }));
app.use(errorLogger);
// обрабатывает ошибки из celebrate
app.use(errors());
// eslint-disable-next-line no-unused-vars
app.use((err, req, res, next) => {
  const { statusCode = 500, message } = err;
  res
    .status(statusCode)
    .send({ message: statusCode === 500 ? 'На сервере произошла ошибка' : message });
});

// запустили нод сервак на 3000 порту
app.listen(PORT, () => {
});
